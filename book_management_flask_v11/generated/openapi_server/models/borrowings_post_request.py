from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class BorrowingsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, book_copy_id=None, user_id=None, due_date=None):  # noqa: E501
        """BorrowingsPostRequest - a model defined in OpenAPI

        :param book_copy_id: The book_copy_id of this BorrowingsPostRequest.  # noqa: E501
        :type book_copy_id: int
        :param user_id: The user_id of this BorrowingsPostRequest.  # noqa: E501
        :type user_id: int
        :param due_date: The due_date of this BorrowingsPostRequest.  # noqa: E501
        :type due_date: datetime
        """
        self.openapi_types = {
            'book_copy_id': int,
            'user_id': int,
            'due_date': datetime
        }

        self.attribute_map = {
            'book_copy_id': 'book_copy_id',
            'user_id': 'user_id',
            'due_date': 'due_date'
        }

        self._book_copy_id = book_copy_id
        self._user_id = user_id
        self._due_date = due_date

    @classmethod
    def from_dict(cls, dikt) -> 'BorrowingsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _borrowings_post_request of this BorrowingsPostRequest.  # noqa: E501
        :rtype: BorrowingsPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def book_copy_id(self) -> int:
        """Gets the book_copy_id of this BorrowingsPostRequest.


        :return: The book_copy_id of this BorrowingsPostRequest.
        :rtype: int
        """
        return self._book_copy_id

    @book_copy_id.setter
    def book_copy_id(self, book_copy_id: int):
        """Sets the book_copy_id of this BorrowingsPostRequest.


        :param book_copy_id: The book_copy_id of this BorrowingsPostRequest.
        :type book_copy_id: int
        """
        if book_copy_id is None:
            raise ValueError("Invalid value for `book_copy_id`, must not be `None`")  # noqa: E501

        self._book_copy_id = book_copy_id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this BorrowingsPostRequest.


        :return: The user_id of this BorrowingsPostRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this BorrowingsPostRequest.


        :param user_id: The user_id of this BorrowingsPostRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def due_date(self) -> datetime:
        """Gets the due_date of this BorrowingsPostRequest.


        :return: The due_date of this BorrowingsPostRequest.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: datetime):
        """Sets the due_date of this BorrowingsPostRequest.


        :param due_date: The due_date of this BorrowingsPostRequest.
        :type due_date: datetime
        """

        self._due_date = due_date
