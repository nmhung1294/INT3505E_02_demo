from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Borrowing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, book_copy_id=None, user_id=None, borrow_date=None, due_date=None, return_date=None, fine=None, overdue=None, days_overdue=None):  # noqa: E501
        """Borrowing - a model defined in OpenAPI

        :param id: The id of this Borrowing.  # noqa: E501
        :type id: int
        :param book_copy_id: The book_copy_id of this Borrowing.  # noqa: E501
        :type book_copy_id: int
        :param user_id: The user_id of this Borrowing.  # noqa: E501
        :type user_id: int
        :param borrow_date: The borrow_date of this Borrowing.  # noqa: E501
        :type borrow_date: datetime
        :param due_date: The due_date of this Borrowing.  # noqa: E501
        :type due_date: datetime
        :param return_date: The return_date of this Borrowing.  # noqa: E501
        :type return_date: datetime
        :param fine: The fine of this Borrowing.  # noqa: E501
        :type fine: float
        :param overdue: The overdue of this Borrowing.  # noqa: E501
        :type overdue: bool
        :param days_overdue: The days_overdue of this Borrowing.  # noqa: E501
        :type days_overdue: int
        """
        self.openapi_types = {
            'id': int,
            'book_copy_id': int,
            'user_id': int,
            'borrow_date': datetime,
            'due_date': datetime,
            'return_date': datetime,
            'fine': float,
            'overdue': bool,
            'days_overdue': int
        }

        self.attribute_map = {
            'id': 'id',
            'book_copy_id': 'book_copy_id',
            'user_id': 'user_id',
            'borrow_date': 'borrow_date',
            'due_date': 'due_date',
            'return_date': 'return_date',
            'fine': 'fine',
            'overdue': 'overdue',
            'days_overdue': 'days_overdue'
        }

        self._id = id
        self._book_copy_id = book_copy_id
        self._user_id = user_id
        self._borrow_date = borrow_date
        self._due_date = due_date
        self._return_date = return_date
        self._fine = fine
        self._overdue = overdue
        self._days_overdue = days_overdue

    @classmethod
    def from_dict(cls, dikt) -> 'Borrowing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Borrowing of this Borrowing.  # noqa: E501
        :rtype: Borrowing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Borrowing.


        :return: The id of this Borrowing.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Borrowing.


        :param id: The id of this Borrowing.
        :type id: int
        """

        self._id = id

    @property
    def book_copy_id(self) -> int:
        """Gets the book_copy_id of this Borrowing.


        :return: The book_copy_id of this Borrowing.
        :rtype: int
        """
        return self._book_copy_id

    @book_copy_id.setter
    def book_copy_id(self, book_copy_id: int):
        """Sets the book_copy_id of this Borrowing.


        :param book_copy_id: The book_copy_id of this Borrowing.
        :type book_copy_id: int
        """

        self._book_copy_id = book_copy_id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Borrowing.


        :return: The user_id of this Borrowing.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Borrowing.


        :param user_id: The user_id of this Borrowing.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def borrow_date(self) -> datetime:
        """Gets the borrow_date of this Borrowing.


        :return: The borrow_date of this Borrowing.
        :rtype: datetime
        """
        return self._borrow_date

    @borrow_date.setter
    def borrow_date(self, borrow_date: datetime):
        """Sets the borrow_date of this Borrowing.


        :param borrow_date: The borrow_date of this Borrowing.
        :type borrow_date: datetime
        """

        self._borrow_date = borrow_date

    @property
    def due_date(self) -> datetime:
        """Gets the due_date of this Borrowing.


        :return: The due_date of this Borrowing.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: datetime):
        """Sets the due_date of this Borrowing.


        :param due_date: The due_date of this Borrowing.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def return_date(self) -> datetime:
        """Gets the return_date of this Borrowing.


        :return: The return_date of this Borrowing.
        :rtype: datetime
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date: datetime):
        """Sets the return_date of this Borrowing.


        :param return_date: The return_date of this Borrowing.
        :type return_date: datetime
        """

        self._return_date = return_date

    @property
    def fine(self) -> float:
        """Gets the fine of this Borrowing.


        :return: The fine of this Borrowing.
        :rtype: float
        """
        return self._fine

    @fine.setter
    def fine(self, fine: float):
        """Sets the fine of this Borrowing.


        :param fine: The fine of this Borrowing.
        :type fine: float
        """

        self._fine = fine

    @property
    def overdue(self) -> bool:
        """Gets the overdue of this Borrowing.


        :return: The overdue of this Borrowing.
        :rtype: bool
        """
        return self._overdue

    @overdue.setter
    def overdue(self, overdue: bool):
        """Sets the overdue of this Borrowing.


        :param overdue: The overdue of this Borrowing.
        :type overdue: bool
        """

        self._overdue = overdue

    @property
    def days_overdue(self) -> int:
        """Gets the days_overdue of this Borrowing.


        :return: The days_overdue of this Borrowing.
        :rtype: int
        """
        return self._days_overdue

    @days_overdue.setter
    def days_overdue(self, days_overdue: int):
        """Sets the days_overdue of this Borrowing.


        :param days_overdue: The days_overdue of this Borrowing.
        :type days_overdue: int
        """

        self._days_overdue = days_overdue
