from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class BookCopy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, book_title_id=None, barcode=None, available=None, condition=None):  # noqa: E501
        """BookCopy - a model defined in OpenAPI

        :param id: The id of this BookCopy.  # noqa: E501
        :type id: int
        :param book_title_id: The book_title_id of this BookCopy.  # noqa: E501
        :type book_title_id: int
        :param barcode: The barcode of this BookCopy.  # noqa: E501
        :type barcode: str
        :param available: The available of this BookCopy.  # noqa: E501
        :type available: bool
        :param condition: The condition of this BookCopy.  # noqa: E501
        :type condition: str
        """
        self.openapi_types = {
            'id': int,
            'book_title_id': int,
            'barcode': str,
            'available': bool,
            'condition': str
        }

        self.attribute_map = {
            'id': 'id',
            'book_title_id': 'book_title_id',
            'barcode': 'barcode',
            'available': 'available',
            'condition': 'condition'
        }

        self._id = id
        self._book_title_id = book_title_id
        self._barcode = barcode
        self._available = available
        self._condition = condition

    @classmethod
    def from_dict(cls, dikt) -> 'BookCopy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookCopy of this BookCopy.  # noqa: E501
        :rtype: BookCopy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this BookCopy.


        :return: The id of this BookCopy.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this BookCopy.


        :param id: The id of this BookCopy.
        :type id: int
        """

        self._id = id

    @property
    def book_title_id(self) -> int:
        """Gets the book_title_id of this BookCopy.


        :return: The book_title_id of this BookCopy.
        :rtype: int
        """
        return self._book_title_id

    @book_title_id.setter
    def book_title_id(self, book_title_id: int):
        """Sets the book_title_id of this BookCopy.


        :param book_title_id: The book_title_id of this BookCopy.
        :type book_title_id: int
        """

        self._book_title_id = book_title_id

    @property
    def barcode(self) -> str:
        """Gets the barcode of this BookCopy.


        :return: The barcode of this BookCopy.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode: str):
        """Sets the barcode of this BookCopy.


        :param barcode: The barcode of this BookCopy.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def available(self) -> bool:
        """Gets the available of this BookCopy.


        :return: The available of this BookCopy.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available: bool):
        """Sets the available of this BookCopy.


        :param available: The available of this BookCopy.
        :type available: bool
        """

        self._available = available

    @property
    def condition(self) -> str:
        """Gets the condition of this BookCopy.


        :return: The condition of this BookCopy.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition: str):
        """Sets the condition of this BookCopy.


        :param condition: The condition of this BookCopy.
        :type condition: str
        """

        self._condition = condition
