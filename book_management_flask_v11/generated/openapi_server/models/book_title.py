from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class BookTitle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, title=None, author=None, publisher=None, year=None, category=None, copies_count=None):  # noqa: E501
        """BookTitle - a model defined in OpenAPI

        :param id: The id of this BookTitle.  # noqa: E501
        :type id: int
        :param title: The title of this BookTitle.  # noqa: E501
        :type title: str
        :param author: The author of this BookTitle.  # noqa: E501
        :type author: str
        :param publisher: The publisher of this BookTitle.  # noqa: E501
        :type publisher: str
        :param year: The year of this BookTitle.  # noqa: E501
        :type year: int
        :param category: The category of this BookTitle.  # noqa: E501
        :type category: str
        :param copies_count: The copies_count of this BookTitle.  # noqa: E501
        :type copies_count: int
        """
        self.openapi_types = {
            'id': int,
            'title': str,
            'author': str,
            'publisher': str,
            'year': int,
            'category': str,
            'copies_count': int
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'author': 'author',
            'publisher': 'publisher',
            'year': 'year',
            'category': 'category',
            'copies_count': 'copies_count'
        }

        self._id = id
        self._title = title
        self._author = author
        self._publisher = publisher
        self._year = year
        self._category = category
        self._copies_count = copies_count

    @classmethod
    def from_dict(cls, dikt) -> 'BookTitle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookTitle of this BookTitle.  # noqa: E501
        :rtype: BookTitle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this BookTitle.


        :return: The id of this BookTitle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this BookTitle.


        :param id: The id of this BookTitle.
        :type id: int
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this BookTitle.


        :return: The title of this BookTitle.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this BookTitle.


        :param title: The title of this BookTitle.
        :type title: str
        """

        self._title = title

    @property
    def author(self) -> str:
        """Gets the author of this BookTitle.


        :return: The author of this BookTitle.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this BookTitle.


        :param author: The author of this BookTitle.
        :type author: str
        """

        self._author = author

    @property
    def publisher(self) -> str:
        """Gets the publisher of this BookTitle.


        :return: The publisher of this BookTitle.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher: str):
        """Sets the publisher of this BookTitle.


        :param publisher: The publisher of this BookTitle.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def year(self) -> int:
        """Gets the year of this BookTitle.


        :return: The year of this BookTitle.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this BookTitle.


        :param year: The year of this BookTitle.
        :type year: int
        """

        self._year = year

    @property
    def category(self) -> str:
        """Gets the category of this BookTitle.


        :return: The category of this BookTitle.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this BookTitle.


        :param category: The category of this BookTitle.
        :type category: str
        """

        self._category = category

    @property
    def copies_count(self) -> int:
        """Gets the copies_count of this BookTitle.


        :return: The copies_count of this BookTitle.
        :rtype: int
        """
        return self._copies_count

    @copies_count.setter
    def copies_count(self, copies_count: int):
        """Sets the copies_count of this BookTitle.


        :param copies_count: The copies_count of this BookTitle.
        :type copies_count: int
        """

        self._copies_count = copies_count
